# FILE: /examples/adder3Tape.yaml (Corrected Version)

name: add binary
type: 3-tape          # CHANGE: Corrected type from '3tape' to '3-tape'
input: '1011+0101'
blank: ' '            # NOTE: The blank symbol is a space ' '

# How it works:
# 1. Copy the first number to tape 2.
# 2. Copy the second number to tape 3.
# 3. Add the two numbers together, writing the result to tape 1.

start state: CopyFirst
table:
  CopyFirst:
    # This state copies the first number to tape 2.
    # We assume tapes 2 and 3 are blank here.
    # The original '0..' is translated to '0, ,'
    '0, , ': { write: [' ', '0', ' '], move: ['R', 'R', 'S'], next: CopyFirst }
    '1, , ': { write: [' ', '1', ' '], move: ['R', 'R', 'S'], next: CopyFirst }
    '+, , ': { write: [' ', ' ', ' '], move: ['R', 'S', 'S'], next: CopySecond}

  CopySecond:
    # This state copies the second number to tape 3.
    # We assume tape 2 is blank here.
    # The original '0..' is translated to '0, , '
    '0, , ': { write: [' ', ' ', '0'], move: ['R', 'S', 'R'], next: CopySecond }
    '1, , ': { write: [' ', ' ', '1'], move: ['R', 'S', 'R'], next: CopySecond }
    ' , , ': { next: Add } # This rule matches when the end of the input is reached

  Add:
    # This state performs the addition from right to left.
    # All keys and instructions are now explicit arrays.
    ' ,0,0': { write: ['0', ' ', ' '], move: ['L', 'L', 'L'], next: Add }
    ' ,0,1': { write: ['1', ' ', ' '], move: ['L', 'L', 'L'], next: Add }
    ' ,1,0': { write: ['1', ' ', ' '], move: ['L', 'L', 'L'], next: Add }
    ' ,1,1': { write: ['0', ' ', ' '], move: ['L', 'L', 'L'], next: Carry }
    ' ,0, ': { write: ['0', ' ', ' '], move: ['L', 'L', 'S'], next: Add }
    ' ,1, ': { write: ['1', ' ', ' '], move: ['L', 'L', 'S'], next: Add }
    ' , ,0': { write: ['0', ' ', ' '], move: ['L', 'S', 'L'], next: Add }
    ' , ,1': { write: ['1', ' ', ' '], move: ['L', 'S', 'L'], next: Add }
    ' , , ': { next: accept }

  Carry:
    # This state handles carrying the 1 during addition.
    ' ,0,0': { write: ['1', ' ', ' '], move: ['L', 'L', 'L'], next: Add   }
    ' ,0,1': { write: ['0', ' ', ' '], move: ['L', 'L', 'L'], next: Carry }
    ' ,1,0': { write: ['0', ' ', ' '], move: ['L', 'L', 'L'], next: Carry }
    ' ,1,1': { write: ['1', ' ', ' '], move: ['L', 'L', 'L'], next: Carry }
    ' ,0, ': { write: ['1', ' ', ' '], move: ['L', 'L', 'S'], next: Add   }
    ' ,1, ': { write: ['0', ' ', ' '], move: ['L', 'L', 'S'], next: Carry }
    ' , ,0': { write: ['1', ' ', ' '], move: ['L', 'S', 'L'], next: Add   }
    ' , ,1': { write: ['0', ' ', ' '], move: ['L', 'S', 'L'], next: Carry }
    ' , , ': { write: ['1', ' ', ' '], move: ['S', 'S', 'S'], next: accept}

  accept:

positions:
  CopyFirst: {x: 230, y: 250}
  CopySecond: {x: 400, y: 250}
  Add: {x: 570, y: 250}
  Carry: {x: 740, y: 250}
  accept: {x: 230.01, y: 380}